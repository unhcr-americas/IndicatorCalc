[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement legoupil@unhcr.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 UNHCR Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/indicators-calculation-functions.html","id":"data-wrangling","dir":"Articles","previous_headings":"","what":"Data Wrangling","title":"Indicators calculation functions","text":"indicator calculation based predefined frame, variable name variable value. Therefore indicator function organised 3 steps: Check standard frame/variable/modalities already present dataset (organised list..) fct_check_map apply mapping supplied argument within function fct_re_map Apply calculation - either append new variable existing data output just final vector results.","code":""},{"path":"/articles/indicators-calculation-functions.html","id":"fct_check_map","dir":"Articles","previous_headings":"Data Wrangling","what":"fct_check_map","title":"Indicators calculation functions","text":"","code":"mapper = list(             hierarchy = \"main\",             variablemap = data.frame(               label = c(\"Does this household use anything for lighting?\",                         \"What source of electricity is used most of the time in this household?\"),               variable = c(\"LIGHT01\",                             \"LIGHT03\"),               mappattern = c(\"LIGHT01\",                             \"LIGHT03\") ),             modalitymap = data.frame(               variable = c( \"LIGHT01\",                              \"LIGHT03\", \"LIGHT03\", \"LIGHT03\"),               label = c( \"yes\",                         \"No electricity in household\", \"Other, specify\", \"Don't know\"),               standard = c( \"1\",                            \"1\", \"96\", \"98\"),               map = c(\"1\",                       \"1\", \"96\", \"98\")             )           )  ## Correct format data <- list(main = data.frame(                 LIGHT01 = c(\"1\",  \"1\",  \"0\", \"1\",  \"1\",  \"0\", \"1\",  \"1\",  \"1\"),                 LIGHT03 = c(\"1\", \"96\", \"98\", \"1\", \"96\", \"98\", \"0\", \"96\", \"98\"))              ) fct_check_map(datalist = data, mapper = mapper ) #> LIGHT01 is in the dataset and has at least one of the expected modality for calculation #> LIGHT03 is in the dataset and has at least one of the expected modality for calculation  ## One variable is not correctly  data <- list(main = data.frame(                 LIGHT01 = c(\"1\",  \"1\",  \"0\", \"1\",  \"1\",  \"0\", \"1\",  \"1\",  \"1\"),                 LIGH03 = c(\"1\", \"96\", \"98\", \"1\", \"96\", \"98\", \"0\", \"96\", \"98\"))              ) fct_check_map(datalist = data, mapper = mapper ) #> LIGHT01 is in the dataset and has at least one of the expected modality for calculation #> ℹ LIGHT03 standard variable was not found in the dataset.  ## The first variable does not include a single 1... data <- list(main = data.frame(                 LIGHT01 = c(\"0\",  \"0\",  \"0\", \"0\",  \"0\",  \"0\", \"0\",  \"0\",  \"0\"),                 LIGHT03 = c(\"1\", \"96\", \"98\", \"1\", \"96\", \"98\", \"0\", \"96\", \"98\"))              ) fct_check_map(datalist = data, mapper = mapper ) #> ℹ LIGHT01 standard variable in the dataset misses at least one response among : 1 #> LIGHT03 is in the dataset and has at least one of the expected modality for calculation"},{"path":"/articles/indicators-calculation-functions.html","id":"fct_get_all_variable_names","dir":"Articles","previous_headings":"Data Wrangling","what":"fct_get_all_variable_names","title":"Indicators calculation functions","text":"","code":"data <- kobocruncher::kobo_data( here::here(\"data-raw\", \"data2.xlsx\")) #> Warning: Expecting logical in QP1095 / R1095C458: got '2' #> Warning: Expecting logical in QP1184 / R1184C458: got '3' #> Warning: Expecting logical in QP1281 / R1281C458: got '2' #> Warning: Expecting logical in AJ1286 / R1286C36: got 'no' varname <-   fct_get_all_variable_names(datalist = data) head(varname, 10) #> # A tibble: 10 × 2 #>    df    value        #>    <chr> <chr>        #>  1 main  start        #>  2 main  end          #>  3 main  today        #>  4 main  phonenumber  #>  5 main  username     #>  6 main  email        #>  7 main  start_mins   #>  8 main  end_mins1    #>  9 main  survey_mins1 #> 10 main  end_mins3"},{"path":"/articles/indicators-calculation-functions.html","id":"fct_re_map","dir":"Articles","previous_headings":"Data Wrangling","what":"fct_re_map","title":"Indicators calculation functions","text":"","code":"mapper = list(             hierarchy = \"main\",             variablemap = data.frame(               label = c(\"Does this household use anything for lighting?\",                         \"What source of electricity is used most of the time in this household?\"),               variable = c(\"LIGHT01\",                             \"LIGHT03\"),               mappattern = c(\"LIGHT01\",                             \"LIGHT03\") ),             modalitymap = data.frame(               variable = c( \"LIGHT01\",                              \"LIGHT03\", \"LIGHT03\", \"LIGHT03\"),               label = c( \"yes\",                 \"No electricity in household\", \"Other, specify\", \"Don't know\"),               standard = c( \"1\",                            \"1\", \"96\", \"98\"),               map = c(\"yes\",                       \"Noelec\", \"Other\", \"Dontknow\")             )           )   ## One variable is not correctly  datalist <- list(mainhousehold = data.frame(                 group.LIGHT01 = c(\"yes\",  \"yes\",  \"no\", \"yes\",  \"yes\",                                   \"no\", \"yes\",  \"yes\",  \"yes\"),                 group.LIGHT03 = c(\"Noelec\", \"Other\", \"Dontknow\", \"Noelec\", \"Other\",                                   \"Dontknow\", \"Nuclear\", \"Other\", \"Dontknow\"))              ) datalist <- fct_re_map(datalist = datalist, mapper = mapper ) #> Mapped levels for LIGHT01 are now: 1, no #> Mapped levels for LIGHT03 are now: 1, 96, 98, Nuclear  fct_check_map(datalist = datalist, mapper = mapper ) #> LIGHT01 is in the dataset and has at least one of the expected modality for calculation #> LIGHT03 is in the dataset and has at least one of the expected modality for calculation"},{"path":[]},{"path":"/articles/indicators-calculation-functions.html","id":"electricity","dir":"Articles","previous_headings":"Impact Indicators","what":"electricity","title":"Indicators calculation functions","text":"","code":"datalist <- kobocruncher::kobo_data( here::here(\"data-raw\", \"data2.xlsx\")) #> Warning: Expecting logical in QP1095 / R1095C458: got '2' #> Warning: Expecting logical in QP1184 / R1184C458: got '3' #> Warning: Expecting logical in QP1281 / R1281C458: got '2' #> Warning: Expecting logical in AJ1286 / R1286C36: got 'no'  datalist2 <- electricity( datalist =datalist,           mapper = list(             hierarchy = \"main\",             variablemap = data.frame(               label = c(\"Does this household use anything for lighting?\",        \"What source of electricity is used most of the time in this household?\"),               variable = c(\"LIGHT01\",                             \"LIGHT03\"),               mappattern = c(\"LIGHT01\",                             \"LIGHT03\") ),             modalitymap = data.frame(               variable = c( \"LIGHT01\",                              \"LIGHT03\", \"LIGHT03\", \"LIGHT03\"),               label = c( \"yes\",                         \"No electricity in household\", \"Other, specify\", \"Don't know\"),               standard = c( \"1\",                            \"1\", \"96\", \"98\"),               map = c(\"yes\",                       \"1\", \"96\", \"98\")))  ) #> ℹ LIGHT01 standard variable was not found in the dataset. #> ℹ LIGHT03 standard variable was not found in the dataset. #> Mapped levels for LIGHT01 are now: 1, no, notell #> ℹ LIGHT03 variable has more than one variable pattern match in the dataset. We will take the first one but good to check... #> Mapped levels for LIGHT03 are now: 1, 2, 3, 4, 5, 6, 7, 96, 98"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edouard Legoupil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Legoupil E (2023). IndicatorCalc: Calculate Standard Survey Indicators Forcibly Displaced Population. R package version 0.0.0.9000, https://github.com/unhcr-americas/IndicatorCalc.","code":"@Manual{,   title = {IndicatorCalc: Calculate Standard Survey Indicators for Forcibly Displaced Population},   author = {Edouard Legoupil},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/unhcr-americas/IndicatorCalc}, }"},{"path":"/index.html","id":"indicatorcalc","dir":"","previous_headings":"","what":"Calculate Standard Survey Indicators for Forcibly Displaced\n    Population","title":"Calculate Standard Survey Indicators for Forcibly Displaced\n    Population","text":"goal {IndicatorCalc} ease implementation standard calculation survey indicators related Forcibly Displaced Population. package designed work based dataset standard backup format exported kobotoolbox within UNHCR internal data repository. calculation implemented function -built check identify whether expected variables modalities within dataset. can check function reference see details documented calculations package also includes: wrapper chain single calculations report template output quick exploration indicators results shiny app provide access package online Rstudio connect (versus offline rstudio)","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Calculate Standard Survey Indicators for Forcibly Displaced\n    Population","text":"easiest way use package shiny interface follow instruction ","code":""},{"path":"/index.html","id":"developpers","dir":"","previous_headings":"","what":"Developpers","title":"Calculate Standard Survey Indicators for Forcibly Displaced\n    Population","text":"can install development version {IndicatorCalc} GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"unhcr-americas/IndicatorCalc\")"},{"path":"/reference/electricity.html","id":null,"dir":"Reference","previous_headings":"","what":"electricity — electricity","title":"electricity — electricity","text":"Households lighting provides sense safety security within outside households sunset. households lack access electricity, especially lighting connectivity, affects occupants' security limits opportunities socialization, learning self-reliance. Numerator: Population access electricity, especially lighting connectivity Denominator: Total population Formula: LIGHT01 = 1 & LIGHT03 != 1, 96, 98","code":""},{"path":"/reference/electricity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"electricity — electricity","text":"","code":"electricity(   datalist,   mapper = list(hierarchy = \"main\", variablemap = data.frame(label =     c(\"Does this household use anything for lighting?\",     \"What source of electricity is used most of the time in this household?\"), variable =     c(\"LIGHT01\", \"LIGHT03\"), mappattern = c(\"LIGHT01\", \"LIGHT03\")), modalitymap =     data.frame(variable = c(\"LIGHT01\", \"LIGHT03\", \"LIGHT03\", \"LIGHT03\"), label = c(\"yes\",     \"No electricity in household\", \"Other, specify\", \"Don't know\"), standard = c(\"1\",     \"1\", \"96\", \"98\"), map = c(\"1\", \"1\", \"96\", \"98\"))) )"},{"path":"/reference/electricity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"electricity — electricity","text":"datalist list hierarchical data frame survey data set. format expected match Excel export synchronized kobo RILD loaded  kobocruncher::kobo_data() mapper list providing mapping variables used calculation - mapper potentially adjusted relation deviation standard XlsForm contextualized dataset","code":""},{"path":"/reference/electricity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"electricity — electricity","text":"new calculated variable - appended ...","code":""},{"path":"/reference/electricity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"electricity — electricity","text":"","code":"datalist <- kobocruncher::kobo_data( here::here(\"data-raw\", \"data2.xlsx\")) #> Warning: Expecting logical in QP1095 / R1095C458: got '2' #> Warning: Expecting logical in QP1184 / R1184C458: got '3' #> Warning: Expecting logical in QP1281 / R1281C458: got '2' #> Warning: Expecting logical in AJ1286 / R1286C36: got 'no'  datalist2 <- electricity( datalist =datalist,           mapper = list(             hierarchy = \"main\",             variablemap = data.frame(               label = c(\"Does this household use anything for lighting?\",        \"What source of electricity is used most of the time in this household?\"),               variable = c(\"LIGHT01\",                             \"LIGHT03\"),               mappattern = c(\"LIGHT01\",                             \"LIGHT03\") ),             modalitymap = data.frame(               variable = c( \"LIGHT01\",                              \"LIGHT03\", \"LIGHT03\", \"LIGHT03\"),               label = c( \"yes\",                         \"No electricity in household\", \"Other, specify\", \"Don't know\"),               standard = c( \"1\",                            \"1\", \"96\", \"98\"),               map = c(\"yes\",                       \"1\", \"96\", \"98\")))  ) #> ℹ LIGHT01 standard variable was not found in the dataset. #> ℹ LIGHT03 standard variable was not found in the dataset. #> Mapped levels for LIGHT01 are now: 1, no, notell #> ℹ LIGHT03 variable has more than one variable pattern match in the dataset. We will take the first one but good to check...  #> Mapped levels for LIGHT03 are now: 1, 2, 3, 4, 5, 6, 7, 96, 98"},{"path":"/reference/fct_check_map.html","id":null,"dir":"Reference","previous_headings":"","what":"fct_check_map — fct_check_map","title":"fct_check_map — fct_check_map","text":"check standard variable modalities","code":""},{"path":"/reference/fct_check_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fct_check_map — fct_check_map","text":"","code":"fct_check_map(datalist, mapper)"},{"path":"/reference/fct_check_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fct_check_map — fct_check_map","text":"datalist list hierarchical data frame survey data set. format expected match Excel export synchronized kobo RILD loaded  kobocruncher::kobo_data() mapper list providing mapping variables used calculation - mapper potentially adjusted relation deviation standard XlsForm contextualized dataset","code":""},{"path":"/reference/fct_check_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fct_check_map — fct_check_map","text":"TRUE FALSE","code":""},{"path":"/reference/fct_check_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fct_check_map — fct_check_map","text":"","code":"mapper = list(             hierarchy = \"main\",             variablemap = data.frame(               label = c(\"Does this household use anything for lighting?\",                         \"What source of electricity is used most of the time in this household?\"),               variable = c(\"LIGHT01\",                             \"LIGHT03\"),               mappattern = c(\"LIGHT01\",                             \"LIGHT03\") ),             modalitymap = data.frame(               variable = c( \"LIGHT01\",                              \"LIGHT03\", \"LIGHT03\", \"LIGHT03\"),               label = c( \"yes\",                         \"No electricity in household\", \"Other, specify\", \"Don't know\"),               standard = c( \"1\",                            \"1\", \"96\", \"98\"),               map = c(\"1\",                       \"1\", \"96\", \"98\")             )           )  ## Correct format data <- list(main = data.frame(                 LIGHT01 = c(\"1\",  \"1\",  \"0\", \"1\",  \"1\",  \"0\", \"1\",  \"1\",  \"1\"),                 LIGHT03 = c(\"1\", \"96\", \"98\", \"1\", \"96\", \"98\", \"0\", \"96\", \"98\"))              ) fct_check_map(datalist = data, mapper = mapper ) #> LIGHT01 is in the dataset and has at least one of the expected modality for calculation #> LIGHT03 is in the dataset and has at least one of the expected modality for calculation  ## One variable is not correctly  data <- list(main = data.frame(                 LIGHT01 = c(\"1\",  \"1\",  \"0\", \"1\",  \"1\",  \"0\", \"1\",  \"1\",  \"1\"),                 LIGH03 = c(\"1\", \"96\", \"98\", \"1\", \"96\", \"98\", \"0\", \"96\", \"98\"))              ) fct_check_map(datalist = data, mapper = mapper ) #> LIGHT01 is in the dataset and has at least one of the expected modality for calculation #> ℹ LIGHT03 standard variable was not found in the dataset.  ## The first variable does not include a single 1... data <- list(main = data.frame(                 LIGHT01 = c(\"0\",  \"0\",  \"0\", \"0\",  \"0\",  \"0\", \"0\",  \"0\",  \"0\"),                 LIGHT03 = c(\"1\", \"96\", \"98\", \"1\", \"96\", \"98\", \"0\", \"96\", \"98\"))              ) fct_check_map(datalist = data, mapper = mapper ) #> ℹ LIGHT01 standard variable in the dataset misses at least one response among : 1 #> LIGHT03 is in the dataset and has at least one of the expected modality for calculation"},{"path":"/reference/fct_get_all_variable_names.html","id":null,"dir":"Reference","previous_headings":"","what":"fct_get_all_variable_names — fct_get_all_variable_names","title":"fct_get_all_variable_names — fct_get_all_variable_names","text":"Generate map variables within datalist obtained RIDL - standard Kobo extract Excel","code":""},{"path":"/reference/fct_get_all_variable_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fct_get_all_variable_names — fct_get_all_variable_names","text":"","code":"fct_get_all_variable_names(datalist)"},{"path":"/reference/fct_get_all_variable_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fct_get_all_variable_names — fct_get_all_variable_names","text":"datalist list hierarchical data frame survey data set. format expected match Excel export synchronized kobo RILD loaded  kobocruncher::kobo_data()","code":""},{"path":"/reference/fct_get_all_variable_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fct_get_all_variable_names — fct_get_all_variable_names","text":"dataframe variables list member names","code":""},{"path":"/reference/fct_get_all_variable_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fct_get_all_variable_names — fct_get_all_variable_names","text":"","code":"data <- kobocruncher::kobo_data( here::here(\"data-raw\", \"data2.xlsx\")) #> Warning: Expecting logical in QP1095 / R1095C458: got '2' #> Warning: Expecting logical in QP1184 / R1184C458: got '3' #> Warning: Expecting logical in QP1281 / R1281C458: got '2' #> Warning: Expecting logical in AJ1286 / R1286C36: got 'no' varname <-   fct_get_all_variable_names(datalist = data) head(varname, 10) #> # A tibble: 10 × 2 #>    df    value        #>    <chr> <chr>        #>  1 main  start        #>  2 main  end          #>  3 main  today        #>  4 main  phonenumber  #>  5 main  username     #>  6 main  email        #>  7 main  start_mins   #>  8 main  end_mins1    #>  9 main  survey_mins1 #> 10 main  end_mins3"},{"path":"/reference/fct_re_map.html","id":null,"dir":"Reference","previous_headings":"","what":"fct_re_map — fct_re_map","title":"fct_re_map — fct_re_map","text":"Take list hierarchical survey entry - use another list remap variables modalities specific questions","code":""},{"path":"/reference/fct_re_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fct_re_map — fct_re_map","text":"","code":"fct_re_map(datalist, mapper)"},{"path":"/reference/fct_re_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fct_re_map — fct_re_map","text":"datalist list hierarchical data frame survey data set. format expected match Excel export synchronized kobo RILD loaded  kobocruncher::kobo_data() mapper list providing mapping variables used calculation - mapper potentially adjusted relation deviation standard XlsForm contextualized dataset","code":""},{"path":"/reference/fct_re_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fct_re_map — fct_re_map","text":"datalist","code":""},{"path":"/reference/fct_re_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fct_re_map — fct_re_map","text":"","code":"mapper = list(             hierarchy = \"main\",             variablemap = data.frame(               label = c(\"Does this household use anything for lighting?\",                         \"What source of electricity is used most of the time in this household?\"),               variable = c(\"LIGHT01\",                             \"LIGHT03\"),               mappattern = c(\"LIGHT01\",                             \"LIGHT03\") ),             modalitymap = data.frame(               variable = c( \"LIGHT01\",                              \"LIGHT03\", \"LIGHT03\", \"LIGHT03\"),               label = c( \"yes\",                 \"No electricity in household\", \"Other, specify\", \"Don't know\"),               standard = c( \"1\",                            \"1\", \"96\", \"98\"),               map = c(\"yes\",                       \"Noelec\", \"Other\", \"Dontknow\")             )           )   ## One variable is not correctly  datalist <- list(mainhousehold = data.frame(                 group.LIGHT01 = c(\"yes\",  \"yes\",  \"no\", \"yes\",  \"yes\",                                   \"no\", \"yes\",  \"yes\",  \"yes\"),                 group.LIGHT03 = c(\"Noelec\", \"Other\", \"Dontknow\", \"Noelec\", \"Other\",                                   \"Dontknow\", \"Nuclear\", \"Other\", \"Dontknow\"))              ) datalist <- fct_re_map(datalist = datalist, mapper = mapper ) #> Mapped levels for LIGHT01 are now: 1, no #> Mapped levels for LIGHT03 are now: 1, 96, 98, Nuclear  fct_check_map(datalist = datalist, mapper = mapper ) #> LIGHT01 is in the dataset and has at least one of the expected modality for calculation #> LIGHT03 is in the dataset and has at least one of the expected modality for calculation"},{"path":"/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See ?golem::get_golem_options details.","code":""},{"path":"/news/index.html","id":"indicatorcalc-0009000","dir":"Changelog","previous_headings":"","what":"IndicatorCalc 0.0.0.9000","title":"IndicatorCalc 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
